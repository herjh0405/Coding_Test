# 정수 X가 주어질 때 정수 X에 사용할 수 있는 연산은 다음과 같이 4가지이다.
# 1. X가 5로 나누어떨어지면, 5로 나눈다.
# 2. X가 3으로 나누어떨어지면, 3으로 나눈다.
# 3. X가 2로 나누어떨어지면, 2로 나눈다.
# 4. X에서 1을 뺀다.
# 정수 X가 주어졌을 때, 연산 4개를 적절히 사용해서 1을 만들려고 한다. 연산을 사용하는 횟수의 최솟값을 출력하시오.
# 첫째 줄에 정수 X가 주어진다. (1 <= x <= 30000)

# 정수 x를 입력받기
x = int(input())

# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [0] * 30001

# 다이나믹 프로그래밍 진행(바텀업)
for i in range(2, x+1) :
     # 현재의 수에서 1을 빼는 경우
     d[i] = d[i-1] + 1
     # 현재의 수가 2로 나누어 떨어지는 경우
     if i % 2 == 0 :
          d[i] = min(d[i], d[i//2]+1)
     if i % 3 == 0 :
          d[i] = min(d[i], d[i//3]+1)
     if i % 5 == 0 :
          d[i] = min(d[i], d[i//5]+1)

print(d[x])

# 문제 해설
# 문제를 도식화해보면 피보나치와 같이 동일한 함수에서 구하는 값들이 동일해야함을 알 수 있다.
# 문제가 요구하는 것을 점화식으로 표현해보자. 점화식 끝에 1을 더해주는 이유는 함수의 호출 횟수를 구해야하기 때문이다.
# Ai = min(Ai-1, Ai/2, Ai/3, Ai/5) +1 
# 실제 코드로 구현할 때는 1을 빼는 연산을 제외하고는 해당 수로 나누어떨어질 때에 한해서만 점화식을 적용할 수 있다.
# 더불어 두 수 중에서 단순히 더 작은 수를 구하고자 할 대는 파이썬에서의 min() 함수를 이용하면 간단하다.

# 점화식을 잘 세우면 문제를 쉽게 해결하는 데 도움이 된다. 점화식을 세우는 것은 예전부터 많이 해봤기에 천천히 접근하면 될 것 같다.
# 한번 풀어봤기에 앞으로도 풀 수 있을 것 같고, 모르고 만났다면 굉장히 당황했지 않았을까