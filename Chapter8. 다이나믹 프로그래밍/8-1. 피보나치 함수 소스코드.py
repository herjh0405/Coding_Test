# 다이나믹 프로그래밍이란 메모리 공간을 약간 더 사용하여 연산 속도를 비약적으로 증가시키는 기법
# 다이나믹 프로그래밍에는 탑다운과 바텀업 방식이 있다.
# 다이나믹 프로그래밍은 항상 사용할 수는 없으며, 다음 조건을 만족할 때 사용할 수 있다
#    1. 큰 문제를 작은 문제로 나눌 수 있다.
#    2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다.

# 그 전에 앞서 아이디어를 소개하기 위해 피보나치 수열을 이야기 하겠음

# 피보나치 함수를 재귀 함수로 표현
def fibo(x) : 
     if x == 1 or x == 2 :
          return 1 
     return fibo(x-1) + fibo(x-2)

print(fibo(4)) # 3
# 재귀 함수를 사용하면 이렇게 간단히 해결할 수 있지만, n이 커질수록 수행 시간이 기하급수적으로 늘어나는 문제가 발생
# 왜냐? 이미 계산을 마친 함수들을 계속 계산하기 때문 -> 이것을 다이나믹 프로그래밍으로 해결
# 메모제이션은 다이나믹 프로그래밍을 구현하는 방법 중 한 종류로 한 번 구한 결과를 메모리 공간에
# 메모해두고 같은 식을 다시 호출하면 메모한 결과를 그대로 가져오는 기법 / 캐싱이라 하기도 함