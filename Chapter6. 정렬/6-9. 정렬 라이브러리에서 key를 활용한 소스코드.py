# sorted나 sort를 이용할 때는 key 매개변수를 입력으로 받을 수도 있다.
# key 값으로는 하나의 함수가 들어가야 하며 이는 정렬 기준이 된다.

# 예를 들어 리스트의 형태가 튜플로 구성되어 있을 때, 각 데이터의 두 번쨰
# 원소를 기준으로 설정하는 경우 다음과 같은 형태의 소스코드를 작성할 수 있다.

array = [('바나나', 2), ('사과', 5), ('당근', 3)]

def setting(data) :
    return data[1]

result = sorted(array, key=setting)
print(result) # [('바나나', 2), ('당근', 3), ('사과', 5)]

# 정렬 라이브러리는 이미 잘 작성된 함수이므로 우리가 직접 퀵 정렬을 구현할 때보다 효과적이다.
# 문제에서 별도의 요구가 없다면 단순히 정렬해야 하는 사오항에서는 기본 정렬 라이브러리를 사용하고,
# 데이터의 범위가 한정되어 있으며 더 빠르게 동작해야 할 때는 계수 정렬을 사용하자.

# 코딩 테스트에서 정렬 알고리즘이 사용되는 경우를 일반적으로 3가지 문제 유형을 나타낼 수 있다.
# 1. 정렬 라이브러리로 풀 수 있는 문제: 단순히 정렬 기법을 알고 있는지 물어보는 문제로 기본 정렬
# 라이브러리의 사용 방법을 숙지하고 있으면 어렵지 않게 풀 수 있다.
# 2. 정렬 알고리즘의 원리에 대해서 물어보는 문제 : 선택, 삽입, 퀵 정렬 등의 원리를 알고 있어야 문제를 풀 수 있다.
# 3. 더 빠른 정렬이 필요한 문제 : 퀵 정렬 기반의 정렬 기법으로는 풀 수 없으며 계수 정렬 등의
# 다른 정렬 알고리즘을 이용하거나 문제에서 기존에 알려진 알고리즘의 구조적인 개선을 거쳐야 풀 수 있다.
# 이 책에서는 이 3가지 유형을 모두 다룰 것이다. 이번 Chapter에서는 가장 기본적인 3문제를 풀어보자.
