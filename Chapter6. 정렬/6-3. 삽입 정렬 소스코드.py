# 삽입 정렬은 알고리즘 문제 풀이에 사용하기에는 느린 편이다.
# 선택 정렬에 비해 구현 난이도는 높은 편이지만, 실행 시간 측면에서 더 효율적이다.
# 삽입 정렬은 필요할 때만 위치를 바꾸므로 '데이터가 거의 정렬 되어 있을 때' 훨씬 효율적이다.
# 삽입 정렬의 재미있는 특징은, 정렬이 이루어진 원소는 항상 오름차순을 유지하고 있다는 점이다.
# 즉, 특정한 데이터의 왼쪽에 있는 데이터들은 이미 정렬이 된 상태이므로 자기보다 작은 데이터를 만났다면 더 이상 데이터를 살펴볼 필요가 없다.
array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

# 첫 번째 원소는 정렬이 되어 있다고 가정하기 때문에 세지 않음.
for i in range(1, len(array)):
    for j in range(i, 0, -1) : # 인덱스 i부터 1까지 감소하여 반복하는 문법
        if array[j] < array[j-1] : # 한 칸씩 왼쪽으로 이동
            array[j], array[j-1] = array[j-1], array[j]
        else : # 자기보다 작은 데이터를 만나면 그 위치에서 멈춤
            break

print(array) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

