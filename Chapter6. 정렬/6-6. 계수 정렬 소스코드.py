# 계수 정렬 알고리즘은 특정한 조건이 부합할 때만 사용할 수 있지만, 매우 빠른 정렬 알고리즘이다.
# '데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때' 사용할 수 있다.
# 일반적으로 가장 큰 데이터와 가장 작은 데이터의 차이가 1,000,000을 넘지 않을 때 효과적이다.
# '모든 범위를 담을 수 있는 크기의 리스트를 선언'해야하기 때문, 앞의 정렬들처럼 비교 기반의 정렬 알고리즘이 아니다.
# 1. 가장 큰 데이터와 가장 작은 데이터의 범위가 모두 담길 수 있도록 하나의 리스트를 생성하고 모두 0으로 초기화시켜줌.
# 2. 그 다음 데이터를 하나씩 확인하며 데이터의 값과 동일한 인덱스의 데이터를 1씩 증가시키면 계수 정렬이 완료된다.

# 모든 원소의 값이 0보다 크거나 같다고 가정
array = [7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8, 0, 5, 2]

# 모든 범위를 포함하는 리스트 선언(모든 값은 0으로 초기화)
count = [0] * (max(array) + 1)

for i in range(len(array)) :
    count[array[i]] += 1 # 각 데이터에 해당하는 인덱스의 값 증가

for i in range(len(count)) :
    for j in range(count[i]) :
        print(i, end = ' ') # 0 0 1 1 2 2 3 4 5 5 6 7 8 9 9

# 계수 정렬의 시간 복잡도는 데이터의 갯수를 N, 데이터 중 최대값의 크기를 K라고 할 때,
# O(N+K)이다. 계수 정렬은 앞에서부터 데이터를 하나씩 확인하면서 리스트에서 적절한
# 인덱스의 값을 1씩 증가시킬 뿐만 아니라, 추후에 리스트의 각 인덱스에 해당하는 값들을
# 확인할 때 데이터 중 최댓값의 크기만큼 반복을 수행해야 하기 때문이다.
# 조건만 맞춰진다면, 현존하는 정렬 알고리즘 중 기수 정렬 알고리즘과 더불어 가장 빠르다.

# 계수 정렬은 때에 따라서 심각한 비효율성을 초래할 수 있다. 예를 들어 데이터가 0과 999,999, 단 2개만 존재할 경우
# 심각한 메모리 낭비가 벌어짐. 따라서 항상 사용할 수 있는 정렬 알고리즘은 아니면, 동일한 값을
# 데이터가 여러 개 등장할 때 적합하다. 그래서 데이터 특성을 파악하기 어렵다면 퀵 정렬을 이용하는 것이 유리하다.
# 되게 간단한 알고리즘인데 생각해보지 못했다. 알고 있었다면 코딩 테스트에서 꽤 유용했을 듯 하다.